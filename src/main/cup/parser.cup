package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.model.SymbolTableManager;
import lyc.compiler.model.Symbol;
import lyc.compiler.model.DataType;
import java.util.List;
import java.util.ArrayList;
class Parser;

action code
{:
     public SymbolTableManager symbolTableManager = new SymbolTableManager();
     public ArrayList<String> varList = new ArrayList();
:}

parser code
{:
    public List<Symbol> getSymbolList() {
        return action_obj.symbolTableManager.getSymbolList();
    }
:}

terminal CICLO;
terminal WRITE;
terminal IF;
terminal ELSE;
terminal READ;

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal CTE_INT;
terminal CTE_STR;
terminal CTE_FLOAT;
terminal IDENTIFIER;
terminal INT;
terminal FLOAT;
terminal STRING;
terminal COLON;
terminal COMMA;
terminal INIT;

terminal OP_AND;
terminal OP_OR;
terminal OP_NOT;
terminal OP_MAYOR;
terminal OP_MINOR;
terminal OP_MAYOREQU;
terminal OP_MINOREQU;
terminal OP_EQU;

terminal ElementInTheMiddle;


// Non Terminals
non terminal program;
non terminal sentence;
non terminal condition;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;

non terminal blockDefinition;
non terminal varDefinition;
non terminal varDefinitionList;
non terminal varType;

non terminal comparison;
non terminal comparator;

non terminal paramList;

// Start Symbol Definition
start with program;

program  ::= sentence {: System.out.println("End"); :};
program  ::= program sentence {: System.out.println("Program Sentence"); :};

sentence ::= assignment {: System.out.println("Sentence"); :};
sentence ::= CICLO OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: System.out.println("CICLO"); :};
sentence ::= WRITE OPEN_BRACKET CTE_STR:constant CLOSE_BRACKET {: System.out.println("WRITE" + constant ); :};
sentence ::= WRITE OPEN_BRACKET IDENTIFIER:constant CLOSE_BRACKET {: System.out.println("WRITE " + constant ); :};
sentence ::= READ OPEN_BRACKET IDENTIFIER  CLOSE_BRACKET {: System.out.println("READ" ); :};
sentence ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: System.out.println("IF"); :};
sentence ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET ELSE OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: System.out.println("IFELSE"); :};


sentence ::= INIT OPEN_CURLY_BRACKET blockDefinition CLOSE_CURLY_BRACKET {: System.out.println("INIT Block"); :};
blockDefinition ::= blockDefinition varDefinition;
blockDefinition ::= varDefinition;
varDefinition::= varDefinitionList COLON varType {: System.out.println("Variable Definition"); :};
varDefinitionList ::= varDefinitionList COMMA IDENTIFIER:id {: this.varList.add(id.toString()); System.out.println("Variable: " + id.toString()); :};
varDefinitionList ::= IDENTIFIER:id {: this.varList.add(id.toString()); System.out.println("Variable: " + id.toString()); :};
varType ::= FLOAT {: symbolTableManager.addIdentifiers(this.varList, DataType.FLOAT); System.out.println("Type: FLOAT"); :};
varType ::= STRING {: symbolTableManager.addIdentifiers(this.varList, DataType.STRING); System.out.println("Type: STRING"); :};
varType ::= INT {: symbolTableManager.addIdentifiers(this.varList, DataType.INTEGER); System.out.println("Type: INT"); :};

condition ::= comparison;
condition ::= condition OP_AND comparison {: System.out.println("AND"); :};
condition ::= condition OP_OR comparison {: System.out.println("OR"); :};
condition ::= OP_NOT comparison {: System.out.println("NOT"); :};

comparison ::= expression comparator expression;
comparator ::= OP_MAYOR | OP_MINOR | OP_MAYOREQU| OP_MINOREQU| OP_EQU;

assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Assignment"); :};

expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term;
//expression ::= ElementInTheMiddle OPEN_BRACKET paramList CLOSE_BRACKET {: System.out.println("ElementInTheMiddle"); :};
//paramList  ::= factor:f1 COMMA paramList COMMA factor:f2 {: System.out.println("Param: " + f1.toString() + "\nParam: " + f2.toString()); :};
//paramList  ::= factor:f {: System.out.println("Middle Param: " + f.toString()); :};

expression ::= ElementInTheMiddle OPEN_BRACKET paramList CLOSE_BRACKET {: System.out.println("ElementInTheMiddle"); :};
paramList  ::= paramList COMMA factor  COMMA factor ;
paramList  ::= factor;


term ::= term MULT factor;
term ::= term DIV factor;
term ::= factor;

factor ::= IDENTIFIER:id {: System.out.println("Id: " + id); :};
factor ::= CTE_INT:constant {:symbolTableManager.addConstant(constant.toString()); System.out.println("Constant Int: " + constant ); :};
factor ::= CTE_FLOAT:constant {: symbolTableManager.addConstant(constant.toString()); System.out.println("Constant Float: " + constant ); :};
factor ::= CTE_STR:constant {: symbolTableManager.addStringConstant(constant.toString()); System.out.println("Constant String: " + constant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET;