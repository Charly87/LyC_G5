package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.model.SymbolTableManager;
import lyc.compiler.model.Symbol;
import java.util.List;
import java.util.ArrayList;
class Parser;

action code
{:
     public SymbolTableManager symbolTableManager = new SymbolTableManager();

:}

parser code
{:
    public List<Symbol> getSymbolList() {
        return action_obj.symbolTableManager.getSymbolList();
    }
:}

terminal CICLO;
terminal WRITE;
terminal IF;
terminal ELSE;
terminal READ;

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal IDENTIFIER;
terminal INT;
terminal FLOAT;
terminal STRING;
terminal COLON;
terminal COMMA;
terminal INIT;

terminal OP_AND;
terminal OP_OR;
terminal OP_NOT;
terminal OP_MAYOR;
terminal OP_MINOR;
terminal OP_MAYOREQU;
terminal OP_MINOREQU;
terminal OP_EQU;


// Non Terminals
non terminal program;
non terminal sentence;
non terminal condition;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;

non terminal blockDefinition;
non terminal varDefinition;
non terminal varDefinitionList;
non terminal varType;

non terminal comparison;
non terminal comparator;

// Start Symbol Definition
start with program;

program  ::= sentence {: System.out.println("End"); :};
program  ::= program sentence {: System.out.println("Program Sentence"); :};

sentence ::= assignment {: System.out.println("Sentence"); :};
sentence ::= CICLO OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: System.out.println("CICLO"); :};
sentence ::= WRITE OPEN_BRACKET STRING_CONSTANT:constant CLOSE_BRACKET {: System.out.println("WRITE" + constant ); :};
sentence ::= READ OPEN_BRACKET IDENTIFIER  CLOSE_BRACKET {: System.out.println("READ" ); :};
sentence ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: System.out.println("IF"); :};
sentence ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET ELSE OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: System.out.println("IFELSE"); :};


sentence ::= INIT OPEN_CURLY_BRACKET blockDefinition CLOSE_CURLY_BRACKET {: System.out.println("Block"); :};
blockDefinition ::= blockDefinition varDefinition {: System.out.println("Block List"); :};
blockDefinition ::= varDefinition {: System.out.println("Block Variable Definition"); :};
varDefinition::= varDefinitionList COLON varType {: System.out.println("Variable Definition"); :};
varDefinitionList ::= varDefinitionList COMMA IDENTIFIER {: System.out.println("Variable Definition List"); :};
varDefinitionList ::= IDENTIFIER {: System.out.println("Variable Definition List"); :};
varType ::= FLOAT | STRING | INT;

condition ::= comparison;
condition ::= condition OP_AND comparison;
condition ::= condition OP_OR comparison;
condition ::= OP_NOT comparison;


comparison ::= expression comparator expression;
comparator ::= OP_MAYOR | OP_MINOR | OP_MAYOREQU| OP_MINOREQU| OP_EQU;

assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Assignment"); :};
//assignment ::= IDENTIFIER ASSIG STRING_CONSTANT {: System.out.println("String Assignment"); :};

expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term;

term ::= term MULT factor;
term ::= term DIV factor;
term ::= factor;

factor ::= IDENTIFIER:id {: System.out.println("Id: " + id); :};
//factor ::= INTEGER_CONSTANT:constant {:System.out.println("Constant Int: " + constant ); :};
//factor ::= FLOAT_CONSTANT:constant {: System.out.println("Constant Float: " + constant ); :};
//factor ::= STRING_CONSTANT:constant {: System.out.println("Constant Float: " + constant ); :};
factor ::= INTEGER_CONSTANT:constant {:symbolTableManager.addConstant(constant.toString()); System.out.println("Constant Int: " + constant ); :};
factor ::= FLOAT_CONSTANT:constant {: symbolTableManager.addConstant(constant.toString()); System.out.println("Constant Float: " + constant ); :};
factor ::= STRING_CONSTANT:constant {: symbolTableManager.addStringConstant(constant.toString()); System.out.println("Constant Float: " + constant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET;