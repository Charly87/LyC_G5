package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.model.SymbolTableManager;
import lyc.compiler.model.PolacaManager;
import lyc.compiler.model.Symbol;
import lyc.compiler.model.DataType;
import java.util.List;
import java.util.ArrayList;
class Parser;

action code
{:
     public SymbolTableManager symbolTableManager = new SymbolTableManager();
     public PolacaManager polacaManager = new PolacaManager();
     public ArrayList<String> varList = new ArrayList();
:}

parser code
{:
    public List<Symbol> getSymbolList() {
        return action_obj.symbolTableManager.getSymbolList();
    }

    public ArrayList<String> getPolacaList() {
            return action_obj.polacaManager.getList();
    }
:}

terminal CICLO;
terminal WRITE;
terminal IF;
terminal ELSE;
terminal READ;

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal CTE_INT;
terminal CTE_STR;
terminal CTE_FLOAT;
terminal IDENTIFIER;
terminal INT;
terminal FLOAT;
terminal STRING;
terminal COLON;
terminal COMMA;
terminal INIT;

terminal OP_AND;
terminal OP_OR;
terminal OP_NOT;
terminal OP_MAYOR;
terminal OP_MINOR;
terminal OP_MAYOREQU;
terminal OP_MINOREQU;
terminal OP_EQU;
terminal OP_DISTINCT;

terminal ElementInTheMiddle;


// Non Terminals
non terminal startProgram;
non terminal program;
non terminal sentence;
non terminal condition;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;

non terminal blockDefinition;
non terminal varDefinition;
non terminal varDefinitionList;
non terminal varType;

non terminal comparison;
non terminal comparator;

non terminal paramList;

// Start Symbol Definition
start with startProgram;

startProgram ::= program {: polacaManager.show(); :};
program  ::= sentence {: System.out.println("End"); :};
program  ::= program sentence;

sentence ::= INIT OPEN_CURLY_BRACKET blockDefinition CLOSE_CURLY_BRACKET {: System.out.println("INIT Block"); :};
blockDefinition ::= blockDefinition varDefinition;
blockDefinition ::= varDefinition;
varDefinition::= varDefinitionList COLON varType {: System.out.println("Variable Definition"); :};
varDefinitionList ::= varDefinitionList COMMA IDENTIFIER:id {: this.varList.add(id.toString()); System.out.println("Variable: " + id.toString()); :};
varDefinitionList ::= IDENTIFIER:id {: this.varList.add(id.toString()); System.out.println("Variable: " + id.toString()); :};
varType ::= FLOAT {: symbolTableManager.addIdentifiers(this.varList, DataType.FLOAT); System.out.println("Type: FLOAT"); :};
varType ::= STRING {: symbolTableManager.addIdentifiers(this.varList, DataType.STRING); System.out.println("Type: STRING"); :};
varType ::= INT {: symbolTableManager.addIdentifiers(this.varList, DataType.INTEGER); System.out.println("Type: INT"); :};

sentence ::= CICLO OPEN_BRACKET {: polacaManager.insert("ET"); :} condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: polacaManager.insert("BICICLO"); :};
sentence ::= WRITE OPEN_BRACKET CTE_STR:constant CLOSE_BRACKET {: System.out.println("WRITE" + constant ); :};
sentence ::= WRITE OPEN_BRACKET IDENTIFIER:constant CLOSE_BRACKET {: System.out.println("WRITE " + constant ); :};
sentence ::= READ OPEN_BRACKET IDENTIFIER  CLOSE_BRACKET {: System.out.println("READ" ); :};
sentence ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: polacaManager.insert("BI"); :} ELSE OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: polacaManager.unstack(); :};
sentence ::= IF OPEN_BRACKET condition  CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: polacaManager.unstack(); :};
sentence ::= assignment;

condition ::= condition OP_AND comparison {: polacaManager.insert("AND"); :};
condition ::= condition {: polacaManager.insert("NOT");:} OP_OR comparison {: polacaManager.insert("OR");:};
condition ::= OP_NOT comparison {: polacaManager.insert("NOT"); :};
condition ::= comparison;

comparison ::= expression OP_MAYOR expression {: polacaManager.insert("BLE"); :};
comparison ::= expression OP_MINOR expression {: polacaManager.insert("BGE"); :};
comparison ::= expression OP_MAYOREQU expression {: polacaManager.insert("BLT"); :};
comparison ::= expression OP_MINOREQU expression {: polacaManager.insert("BGT"); :};
comparison ::= expression OP_EQU expression {: polacaManager.insert("BNE"); :};
comparison ::= expression OP_DISTINCT expression {: polacaManager.insert("BEQ"); :};


assignment ::= IDENTIFIER:id ASSIG expression {: polacaManager.insert(id.toString()); polacaManager.insert(":=");:};

expression ::= expression PLUS term {: polacaManager.insert("+"); :};
expression ::= expression SUB term {: polacaManager.insert("-"); :};
expression ::= term;

expression ::= ElementInTheMiddle OPEN_BRACKET paramList CLOSE_BRACKET {: System.out.println("ElementInTheMiddle"); :};
paramList  ::= paramList COMMA factor  COMMA factor ;
paramList  ::= factor;


term ::= term MULT factor {: polacaManager.insert("*"); :};
term ::= term DIV factor {: polacaManager.insert("/"); :};
term ::= factor;

factor ::= IDENTIFIER:id {: polacaManager.insert(id.toString()); :};
factor ::= CTE_INT:constant {: symbolTableManager.addConstant(constant.toString()); polacaManager.insert(constant.toString());:};
factor ::= CTE_FLOAT:constant {: symbolTableManager.addConstant(constant.toString()); polacaManager.insert(constant.toString());:};
factor ::= CTE_STR:constant {: symbolTableManager.addStringConstant(constant.toString()); polacaManager.insert(constant.toString());:};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET;