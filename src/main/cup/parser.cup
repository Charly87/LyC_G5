package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.model.SymbolTableManager;
import lyc.compiler.polaca.PolacaManager;
import lyc.compiler.assembler.AssemblerManager;
import lyc.compiler.model.Symbol;
import lyc.compiler.model.DataType;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
class Parser;

action code
{:
     public SymbolTableManager symbolTableManager = new SymbolTableManager();
     public PolacaManager polacaManager = new PolacaManager(symbolTableManager);
     public AssemblerManager assemblerManager = new AssemblerManager(symbolTableManager,polacaManager);

     public List<String> varList = new ArrayList<String>();
     public DataType tFactor,tExpresion,tTermino,tExpresionAux;
:}

parser code
{:
    public List<Symbol> getSymbolList() {
        return action_obj.symbolTableManager.getSymbolList();
    }

    public List<String> getPolacaList() {
        return action_obj.polacaManager.getPolacaList();
    }

    public List<String> getAssemblerList() {
        return action_obj.assemblerManager.getAssemblerList();
    }
:}

terminal CICLO;
terminal WRITE;
terminal IF;
terminal ELSE;
terminal READ;

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal CTE_INT;
terminal CTE_STR;
terminal CTE_FLOAT;
terminal IDENTIFIER;
terminal INT;
terminal FLOAT;
terminal STRING;
terminal COLON;
terminal COMMA;
terminal INIT;

terminal OP_AND;
terminal OP_OR;
terminal OP_NOT;
terminal OP_MAYOR;
terminal OP_MINOR;
terminal OP_MAYOREQU;
terminal OP_MINOREQU;
terminal OP_EQU;
terminal OP_DISTINCT;

terminal ElementInTheMiddle;


// Non Terminals
non terminal startProgram;
non terminal program;
non terminal sentence;
non terminal condition;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;

non terminal blockDefinition;
non terminal varDefinition;
non terminal varDefinitionList;
non terminal varType;

non terminal comparison;
non terminal comparator;

non terminal paramList;

// Start Symbol Definition
start with startProgram;

startProgram ::= program {: polacaManager.show();assemblerManager.generate(); :};
program  ::= sentence;
program  ::= program sentence;

sentence ::= INIT OPEN_CURLY_BRACKET blockDefinition CLOSE_CURLY_BRACKET ;
blockDefinition ::= blockDefinition varDefinition;
blockDefinition ::= varDefinition;
varDefinition::= varDefinitionList COLON varType;
varDefinitionList ::= varDefinitionList COMMA IDENTIFIER:id {: this.varList.add(id.toString());:};
varDefinitionList ::= IDENTIFIER:id {: this.varList.add(id.toString()); :};
varType ::= FLOAT {: symbolTableManager.addIdentifiers(this.varList, DataType.FLOAT); :};
varType ::= STRING {: symbolTableManager.addIdentifiers(this.varList, DataType.STRING); :};
varType ::= INT {: symbolTableManager.addIdentifiers(this.varList, DataType.INTEGER); :};

sentence ::= CICLO OPEN_BRACKET {: polacaManager.insert("ET"); :} condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: polacaManager.insert("BICICLO"); :};
sentence ::= WRITE OPEN_BRACKET CTE_STR:constant CLOSE_BRACKET {: symbolTableManager.addFactor(constant.toString(),DataType.CTE_STRING); polacaManager.insert(constant.toString()); polacaManager.insert("WRITE"); :};
sentence ::= WRITE OPEN_BRACKET IDENTIFIER:identifier CLOSE_BRACKET {:polacaManager.insert(identifier.toString()); polacaManager.insert("WRITE");  :};
sentence ::= READ OPEN_BRACKET IDENTIFIER:identifier  CLOSE_BRACKET {:polacaManager.insert(identifier.toString()); polacaManager.insert("READ"); :};
sentence ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: polacaManager.insert("BI"); :} ELSE OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: polacaManager.unstack(); :};
sentence ::= IF OPEN_BRACKET condition  CLOSE_BRACKET OPEN_CURLY_BRACKET program CLOSE_CURLY_BRACKET {: polacaManager.unstack(); :};
sentence ::= assignment;

condition ::= condition OP_AND comparison {: polacaManager.insert("AND"); :};
condition ::= condition {: polacaManager.insert("NOT");:} OP_OR comparison {: polacaManager.insert("OR");:};
condition ::= OP_NOT comparison {: polacaManager.insert("NOT"); :};
condition ::= comparison;

comparison ::= expression {: tExpresionAux= tExpresion; :} OP_MAYOR expression {: polacaManager.analizar(tExpresionAux,tExpresion); polacaManager.insert("BLE"); :};
comparison ::= expression {: tExpresionAux= tExpresion; :} OP_MINOR expression {: polacaManager.analizar(tExpresionAux,tExpresion); polacaManager.insert("BGE"); :};
comparison ::= expression {: tExpresionAux= tExpresion; :} OP_MAYOREQU expression {: polacaManager.analizar(tExpresionAux,tExpresion); polacaManager.insert("BLT"); :};
comparison ::= expression {: tExpresionAux= tExpresion; :} OP_MINOREQU expression {: polacaManager.analizar(tExpresionAux,tTermino); polacaManager.insert("BGT"); :};
comparison ::= expression {: tExpresionAux= tExpresion; :} OP_EQU expression {: polacaManager.analizar(tExpresionAux,tExpresion); polacaManager.insert("BNE"); :};
comparison ::= expression {: tExpresionAux= tExpresion; :} OP_DISTINCT expression {: polacaManager.analizar(tExpresionAux,tExpresion); polacaManager.insert("BEQ"); :};


assignment ::= IDENTIFIER:id ASSIG expression {:
                polacaManager.analizar(symbolTableManager.getSymbol(id.toString()).getType(),tExpresion);
                polacaManager.insert(id.toString());polacaManager.insert(":="); :};

expression ::= expression PLUS term {: polacaManager.analizar(tExpresion,tTermino); polacaManager.insert("+"); :};
expression ::= expression SUB term {: polacaManager.analizar(tExpresion,tTermino); polacaManager.insert("-"); :};
expression ::= term {: tExpresion=tTermino; :};

expression ::= ElementInTheMiddle OPEN_BRACKET paramList CLOSE_BRACKET {:polacaManager.insert("EITMEnd");:};
paramList  ::= paramList COMMA {:polacaManager.insert("EITMBodyStart");:} factor COMMA {:polacaManager.insert("EITMBody");:} factor {:polacaManager.insert("EITMBodyEnd");:};
paramList  ::= factor {:polacaManager.insert("EITMStart");:};


term ::= term MULT factor {: polacaManager.analizar(tTermino,tFactor); polacaManager.insert("*"); :};
term ::= term DIV factor {: polacaManager.analizar(tTermino,tFactor); polacaManager.insert("/"); :};
term ::= factor {: tTermino=tFactor; :};

factor ::= IDENTIFIER:id {: tFactor=symbolTableManager.getFactor(id.toString()); polacaManager.insert(id.toString()); :};
factor ::= CTE_INT:constant {: symbolTableManager.addFactor(constant.toString(),DataType.CTE_INTEGER); tFactor=DataType.CTE_INTEGER;polacaManager.insert(constant.toString()); :};
factor ::= CTE_FLOAT:constant {: symbolTableManager.addFactor(constant.toString(),DataType.CTE_FLOAT); tFactor=DataType.CTE_FLOAT;polacaManager.insert(constant.toString());:};
factor ::= CTE_STR:constant {: symbolTableManager.addFactor(constant.toString(),DataType.CTE_STRING); tFactor=DataType.CTE_STRING;polacaManager.insert(constant.toString());:};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET;